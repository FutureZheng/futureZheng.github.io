<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式系统 on Future blog</title>
    <link>https://zzl578472734.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 分布式系统 on Future blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 26 Jul 2021 09:55:22 +0800</lastBuildDate><atom:link href="https://zzl578472734.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式限流-分布式令牌桶</title>
      <link>https://zzl578472734.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%A4%E7%89%8C%E6%A1%B6/</link>
      <pubDate>Mon, 26 Jul 2021 09:55:22 +0800</pubDate>
      
      <guid>https://zzl578472734.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%A4%E7%89%8C%E6%A1%B6/</guid>
      <description>一。单体应用带来的问题？ 之前说到了单机令牌桶的使用，实现上面来说相对简单，但是实际项目开发的时候，考虑项目扩展，都会采用部署多个应用，比如部署多个web项目，或者将应拆分为多个微服务的方式进行部署。
这就要求了，如何确保多个应用请求总和加起来不超过限制。</description>
    </item>
    
    <item>
      <title>分布式限流-单机的令牌桶使用</title>
      <link>https://zzl578472734.github.io/post/%E5%8D%95%E6%9C%BA%E7%9A%84%E4%BB%A4%E7%89%8C%E6%A1%B6%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 21 Jul 2021 17:09:56 +0800</pubDate>
      
      <guid>https://zzl578472734.github.io/post/%E5%8D%95%E6%9C%BA%E7%9A%84%E4%BB%A4%E7%89%8C%E6%A1%B6%E4%BD%BF%E7%94%A8/</guid>
      <description>一。在项目中使用令牌桶 根据上一篇文章《分布式限流-从接口访问开始说起》所述，为了控制接口的访问频率，我们采用限流算法来限制请求，根据发展的趋势和通用性，我们采用令牌桶来处理请求。
首先我们会初始化一个令牌桶信息。
我这边使用的是golang语言，在三方扩展包中，有golang.org/x/time/rate 直接支持了令牌桶.</description>
    </item>
    
    <item>
      <title>分布式限流-从接口访问开始说起</title>
      <link>https://zzl578472734.github.io/post/%E4%BB%8E%E5%8D%95%E6%9C%BA%E4%BB%A4%E7%89%8C%E6%A1%B6%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Wed, 21 Jul 2021 14:18:46 +0800</pubDate>
      
      <guid>https://zzl578472734.github.io/post/%E4%BB%8E%E5%8D%95%E6%9C%BA%E4%BB%A4%E7%89%8C%E6%A1%B6%E5%BC%80%E5%A7%8B/</guid>
      <description>一。从接口的访问开始说起 在接入一些第三方应用的时候，很多第三方应用，为了保证自身服务的稳定性和安全性，都会对请求来源机器做一些ip白名单处理，可以防范一些非法用户请求，但是，即使信任了白名单机器，对于自身系统，也还是可能因为白名单用户请求接口调用导致自身系统的不稳定，或者频繁调用一些重要的业务（转账，发钱等）。
这些重要业务的调用，都伴随着严格的鉴权系统，并且还会增加一些访问次数的限制。
1. 百度机器人对话接口 比如最近我在工作中，调用的百度机器人的对话聊天接口</description>
    </item>
    
  </channel>
</rss>
