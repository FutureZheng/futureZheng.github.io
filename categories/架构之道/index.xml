<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构之道 on Future blog</title>
    <link>https://zzl578472734.github.io/categories/%E6%9E%B6%E6%9E%84%E4%B9%8B%E9%81%93/</link>
    <description>Recent content in 架构之道 on Future blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 12 Jul 2021 13:47:06 +0800</lastBuildDate><atom:link href="https://zzl578472734.github.io/categories/%E6%9E%B6%E6%9E%84%E4%B9%8B%E9%81%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>谈谈我认为的技术选型</title>
      <link>https://zzl578472734.github.io/post/%E8%B0%88%E8%B0%88%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/</link>
      <pubDate>Mon, 12 Jul 2021 13:47:06 +0800</pubDate>
      
      <guid>https://zzl578472734.github.io/post/%E8%B0%88%E8%B0%88%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/</guid>
      <description>再我过往做技术的这些年里面，类似这种指导性的文章，我是没有过多考虑的整理成文章内容的，但是随着工作年限的增加和这几年技术发展愈发的迅速，发现每一种技术都有它产生的道理，或者说是为了解决某一类的问题，并且相同的问题可能有多种技术或者软件的解决方案，
比如你所熟悉的消息队列，就有activemq,rabbitmq,rocketmq,kafkal等等.
如何在这么多可选方案中选择出最合适自己的最佳方案，就是“技术选型”。
一。一个具体的例子 结合自己的技术栈，简单的一个具体例子，为什么微服务设计中要使用grpc？（或者说，为什么不用其他的rpc呢，或者用restful风格的api规范）</description>
    </item>
    
  </channel>
</rss>
